{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMNx5+xGIyf7fUwTtkYqUR4",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/richardkilea/BINARY-CLASSIFICATION-OF-SOFTWARE-DEFECTS/blob/main/Binary%20classification%20of%20software%20defects\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 60,
      "metadata": {
        "id": "r2XlLdcolOzL"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# BINARY CLASSIFICATION OF SOFTWARE DEFECTS\n"
      ],
      "metadata": {
        "id": "50j7ChT4lSgg"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Regular EDA and plotting libraries\n",
        "import numpy as np # np is short for numpy\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "\n",
        "# We want our plots to appear in the notebook\n",
        "%matplotlib inline\n",
        "# Models from Scikit-Learn\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.neighbors import KNeighborsClassifier\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "\n",
        "# Model Evaluations\n",
        "from sklearn.model_selection import train_test_split, cross_val_score\n",
        "from sklearn.model_selection import RandomizedSearchCV, GridSearchCV\n",
        "from sklearn.metrics import confusion_matrix, classification_report\n",
        "from sklearn.metrics import precision_score, recall_score, f1_score\n"
      ],
      "metadata": {
        "id": "92JtFhmdl0FV"
      },
      "execution_count": 61,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Import data\n",
        "tr = pd.read_csv(\"train.csv\")\n",
        "te = pd.read_csv(\"test.csv\")"
      ],
      "metadata": {
        "id": "hghoJdbym0Qd"
      },
      "execution_count": 62,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "tr.head()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 256
        },
        "id": "RwsjoYyQ662V",
        "outputId": "b0edc95c-adc2-45f1-d320-b947649e8067"
      },
      "execution_count": 63,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   id   loc  v(g)  ev(g)  iv(g)     n       v     l      d      i  ...  \\\n",
              "0   0  22.0   3.0    1.0    2.0  60.0  278.63  0.06  19.56  14.25  ...   \n",
              "1   1  14.0   2.0    1.0    2.0  32.0  151.27  0.14   7.00  21.11  ...   \n",
              "2   2  11.0   2.0    1.0    2.0  45.0  197.65  0.11   8.05  22.76  ...   \n",
              "3   3   8.0   1.0    1.0    1.0  23.0   94.01  0.19   5.25  17.86  ...   \n",
              "4   4  11.0   2.0    1.0    2.0  17.0   60.94  0.18   5.63  12.44  ...   \n",
              "\n",
              "   lOCode  lOComment  lOBlank  locCodeAndComment  uniq_Op  uniq_Opnd  \\\n",
              "0      17          1        1                  0     16.0        9.0   \n",
              "1      11          0        1                  0     11.0       11.0   \n",
              "2       8          0        1                  0     12.0       11.0   \n",
              "3       4          0        2                  0      8.0        6.0   \n",
              "4       7          0        2                  0      7.0        6.0   \n",
              "\n",
              "   total_Op  total_Opnd  branchCount  defects  \n",
              "0      38.0        22.0          5.0    False  \n",
              "1      18.0        14.0          3.0    False  \n",
              "2      28.0        17.0          3.0    False  \n",
              "3      16.0         7.0          1.0     True  \n",
              "4      10.0        10.0          3.0    False  \n",
              "\n",
              "[5 rows x 23 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-394b72f7-4cfb-4109-92dc-3d09c7264fe4\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>loc</th>\n",
              "      <th>v(g)</th>\n",
              "      <th>ev(g)</th>\n",
              "      <th>iv(g)</th>\n",
              "      <th>n</th>\n",
              "      <th>v</th>\n",
              "      <th>l</th>\n",
              "      <th>d</th>\n",
              "      <th>i</th>\n",
              "      <th>...</th>\n",
              "      <th>lOCode</th>\n",
              "      <th>lOComment</th>\n",
              "      <th>lOBlank</th>\n",
              "      <th>locCodeAndComment</th>\n",
              "      <th>uniq_Op</th>\n",
              "      <th>uniq_Opnd</th>\n",
              "      <th>total_Op</th>\n",
              "      <th>total_Opnd</th>\n",
              "      <th>branchCount</th>\n",
              "      <th>defects</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>22.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>60.0</td>\n",
              "      <td>278.63</td>\n",
              "      <td>0.06</td>\n",
              "      <td>19.56</td>\n",
              "      <td>14.25</td>\n",
              "      <td>...</td>\n",
              "      <td>17</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>16.0</td>\n",
              "      <td>9.0</td>\n",
              "      <td>38.0</td>\n",
              "      <td>22.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>14.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>32.0</td>\n",
              "      <td>151.27</td>\n",
              "      <td>0.14</td>\n",
              "      <td>7.00</td>\n",
              "      <td>21.11</td>\n",
              "      <td>...</td>\n",
              "      <td>11</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>11.0</td>\n",
              "      <td>11.0</td>\n",
              "      <td>18.0</td>\n",
              "      <td>14.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2</td>\n",
              "      <td>11.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>45.0</td>\n",
              "      <td>197.65</td>\n",
              "      <td>0.11</td>\n",
              "      <td>8.05</td>\n",
              "      <td>22.76</td>\n",
              "      <td>...</td>\n",
              "      <td>8</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>12.0</td>\n",
              "      <td>11.0</td>\n",
              "      <td>28.0</td>\n",
              "      <td>17.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3</td>\n",
              "      <td>8.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>23.0</td>\n",
              "      <td>94.01</td>\n",
              "      <td>0.19</td>\n",
              "      <td>5.25</td>\n",
              "      <td>17.86</td>\n",
              "      <td>...</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>8.0</td>\n",
              "      <td>6.0</td>\n",
              "      <td>16.0</td>\n",
              "      <td>7.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4</td>\n",
              "      <td>11.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>17.0</td>\n",
              "      <td>60.94</td>\n",
              "      <td>0.18</td>\n",
              "      <td>5.63</td>\n",
              "      <td>12.44</td>\n",
              "      <td>...</td>\n",
              "      <td>7</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>7.0</td>\n",
              "      <td>6.0</td>\n",
              "      <td>10.0</td>\n",
              "      <td>10.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 23 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-394b72f7-4cfb-4109-92dc-3d09c7264fe4')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-394b72f7-4cfb-4109-92dc-3d09c7264fe4 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-394b72f7-4cfb-4109-92dc-3d09c7264fe4');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-f4cab408-d987-415f-a048-ae57c832a7d3\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-f4cab408-d987-415f-a048-ae57c832a7d3')\"\n",
              "            title=\"Suggest charts.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-f4cab408-d987-415f-a048-ae57c832a7d3 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 63
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "te.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 256
        },
        "id": "rJelT5l78FIy",
        "outputId": "d35dd6ae-bc27-4339-9ae9-7089ffd448d1"
      },
      "execution_count": 64,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       id    loc  v(g)  ev(g)  iv(g)      n        v     l      d      i  ...  \\\n",
              "0  101763   33.0   5.0    1.0    4.0  144.0   824.82  0.04  26.96  30.05  ...   \n",
              "1  101764   27.0   8.0    8.0    2.0  125.0   646.24  0.04  22.82  27.22  ...   \n",
              "2  101765  130.0  11.0    7.0   10.0  545.0  3831.40  0.02  48.15  66.17  ...   \n",
              "3  101766   65.0   7.0    1.0    7.0  156.0   855.71  0.06  17.23  49.89  ...   \n",
              "4  101767   22.0   3.0    1.0    3.0   52.0   238.42  0.10   9.60  26.70  ...   \n",
              "\n",
              "         t  lOCode  lOComment  lOBlank  locCodeAndComment  uniq_Op  uniq_Opnd  \\\n",
              "0  1257.60      30          0        3                  0     21.0       23.0   \n",
              "1   804.58      23          0        2                  0     18.0       19.0   \n",
              "2  6453.34      99          9       17                  1     26.0       53.0   \n",
              "3   896.42      45          8       10                  0     15.0       26.0   \n",
              "4   145.80      16          0        4                  0     12.0       15.0   \n",
              "\n",
              "   total_Op  total_Opnd  branchCount  \n",
              "0      87.0        57.0          9.0  \n",
              "1      70.0        49.0         15.0  \n",
              "2     333.0       244.0         21.0  \n",
              "3      88.0        60.0         13.0  \n",
              "4      30.0        24.0          5.0  \n",
              "\n",
              "[5 rows x 22 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-04f233eb-72dd-45a0-ae7e-571aef78d966\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>loc</th>\n",
              "      <th>v(g)</th>\n",
              "      <th>ev(g)</th>\n",
              "      <th>iv(g)</th>\n",
              "      <th>n</th>\n",
              "      <th>v</th>\n",
              "      <th>l</th>\n",
              "      <th>d</th>\n",
              "      <th>i</th>\n",
              "      <th>...</th>\n",
              "      <th>t</th>\n",
              "      <th>lOCode</th>\n",
              "      <th>lOComment</th>\n",
              "      <th>lOBlank</th>\n",
              "      <th>locCodeAndComment</th>\n",
              "      <th>uniq_Op</th>\n",
              "      <th>uniq_Opnd</th>\n",
              "      <th>total_Op</th>\n",
              "      <th>total_Opnd</th>\n",
              "      <th>branchCount</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>101763</td>\n",
              "      <td>33.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>144.0</td>\n",
              "      <td>824.82</td>\n",
              "      <td>0.04</td>\n",
              "      <td>26.96</td>\n",
              "      <td>30.05</td>\n",
              "      <td>...</td>\n",
              "      <td>1257.60</td>\n",
              "      <td>30</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>21.0</td>\n",
              "      <td>23.0</td>\n",
              "      <td>87.0</td>\n",
              "      <td>57.0</td>\n",
              "      <td>9.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>101764</td>\n",
              "      <td>27.0</td>\n",
              "      <td>8.0</td>\n",
              "      <td>8.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>125.0</td>\n",
              "      <td>646.24</td>\n",
              "      <td>0.04</td>\n",
              "      <td>22.82</td>\n",
              "      <td>27.22</td>\n",
              "      <td>...</td>\n",
              "      <td>804.58</td>\n",
              "      <td>23</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>18.0</td>\n",
              "      <td>19.0</td>\n",
              "      <td>70.0</td>\n",
              "      <td>49.0</td>\n",
              "      <td>15.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>101765</td>\n",
              "      <td>130.0</td>\n",
              "      <td>11.0</td>\n",
              "      <td>7.0</td>\n",
              "      <td>10.0</td>\n",
              "      <td>545.0</td>\n",
              "      <td>3831.40</td>\n",
              "      <td>0.02</td>\n",
              "      <td>48.15</td>\n",
              "      <td>66.17</td>\n",
              "      <td>...</td>\n",
              "      <td>6453.34</td>\n",
              "      <td>99</td>\n",
              "      <td>9</td>\n",
              "      <td>17</td>\n",
              "      <td>1</td>\n",
              "      <td>26.0</td>\n",
              "      <td>53.0</td>\n",
              "      <td>333.0</td>\n",
              "      <td>244.0</td>\n",
              "      <td>21.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>101766</td>\n",
              "      <td>65.0</td>\n",
              "      <td>7.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>7.0</td>\n",
              "      <td>156.0</td>\n",
              "      <td>855.71</td>\n",
              "      <td>0.06</td>\n",
              "      <td>17.23</td>\n",
              "      <td>49.89</td>\n",
              "      <td>...</td>\n",
              "      <td>896.42</td>\n",
              "      <td>45</td>\n",
              "      <td>8</td>\n",
              "      <td>10</td>\n",
              "      <td>0</td>\n",
              "      <td>15.0</td>\n",
              "      <td>26.0</td>\n",
              "      <td>88.0</td>\n",
              "      <td>60.0</td>\n",
              "      <td>13.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>101767</td>\n",
              "      <td>22.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>52.0</td>\n",
              "      <td>238.42</td>\n",
              "      <td>0.10</td>\n",
              "      <td>9.60</td>\n",
              "      <td>26.70</td>\n",
              "      <td>...</td>\n",
              "      <td>145.80</td>\n",
              "      <td>16</td>\n",
              "      <td>0</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>12.0</td>\n",
              "      <td>15.0</td>\n",
              "      <td>30.0</td>\n",
              "      <td>24.0</td>\n",
              "      <td>5.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 22 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-04f233eb-72dd-45a0-ae7e-571aef78d966')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-04f233eb-72dd-45a0-ae7e-571aef78d966 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-04f233eb-72dd-45a0-ae7e-571aef78d966');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-1f8d8d0f-a4b4-4df8-88de-282587ca9791\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-1f8d8d0f-a4b4-4df8-88de-282587ca9791')\"\n",
              "            title=\"Suggest charts.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-1f8d8d0f-a4b4-4df8-88de-282587ca9791 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 64
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Normalized value counts\n",
        "tr.defects.value_counts(normalize=True)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "COFnIeD38SCh",
        "outputId": "88c57660-bafd-46e8-acfc-5bda9d5a5079"
      },
      "execution_count": 65,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "False    0.773356\n",
              "True     0.226644\n",
              "Name: defects, dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 65
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Plot the value counts with a bar graph\n",
        "tr.defects.value_counts().plot(kind=\"bar\", color=[\"red\", \"blue\"]);"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 451
        },
        "id": "dV_MGOo48szV",
        "outputId": "9959fd8b-2742-497f-b3de-4bc1731f1915"
      },
      "execution_count": 66,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "tr.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GSBCgkV489cI",
        "outputId": "e8c3b281-a831-41e6-9645-d7a79e29d8b9"
      },
      "execution_count": 67,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 101763 entries, 0 to 101762\n",
            "Data columns (total 23 columns):\n",
            " #   Column             Non-Null Count   Dtype  \n",
            "---  ------             --------------   -----  \n",
            " 0   id                 101763 non-null  int64  \n",
            " 1   loc                101763 non-null  float64\n",
            " 2   v(g)               101763 non-null  float64\n",
            " 3   ev(g)              101763 non-null  float64\n",
            " 4   iv(g)              101763 non-null  float64\n",
            " 5   n                  101763 non-null  float64\n",
            " 6   v                  101763 non-null  float64\n",
            " 7   l                  101763 non-null  float64\n",
            " 8   d                  101763 non-null  float64\n",
            " 9   i                  101763 non-null  float64\n",
            " 10  e                  101763 non-null  float64\n",
            " 11  b                  101763 non-null  float64\n",
            " 12  t                  101763 non-null  float64\n",
            " 13  lOCode             101763 non-null  int64  \n",
            " 14  lOComment          101763 non-null  int64  \n",
            " 15  lOBlank            101763 non-null  int64  \n",
            " 16  locCodeAndComment  101763 non-null  int64  \n",
            " 17  uniq_Op            101763 non-null  float64\n",
            " 18  uniq_Opnd          101763 non-null  float64\n",
            " 19  total_Op           101763 non-null  float64\n",
            " 20  total_Opnd         101763 non-null  float64\n",
            " 21  branchCount        101763 non-null  float64\n",
            " 22  defects            101763 non-null  bool   \n",
            "dtypes: bool(1), float64(17), int64(5)\n",
            "memory usage: 17.2 MB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "from sklearn.compose import ColumnTransformer\n",
        "from sklearn.pipeline import Pipeline\n",
        "from sklearn.impute import SimpleImputer\n",
        "from sklearn.preprocessing import OneHotEncoder"
      ],
      "metadata": {
        "id": "-LBeaOqR-VrR"
      },
      "execution_count": 68,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Find the correlation between our independent variables\n",
        "corr_matrix = tr.corr()\n",
        "corr_matrix"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 820
        },
        "id": "AFDb2LxkDrnK",
        "outputId": "338ef198-a72b-449c-ca98-50f0ef2ca968"
      },
      "execution_count": 69,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                         id       loc      v(g)     ev(g)     iv(g)         n  \\\n",
              "id                 1.000000  0.000790  0.003252 -0.000786  0.001259  0.003580   \n",
              "loc                0.000790  1.000000  0.761509  0.544569  0.696327  0.759605   \n",
              "v(g)               0.003252  0.761509  1.000000  0.729249  0.790553  0.631041   \n",
              "ev(g)             -0.000786  0.544569  0.729249  1.000000  0.545255  0.390504   \n",
              "iv(g)              0.001259  0.696327  0.790553  0.545255  1.000000  0.589718   \n",
              "n                  0.003580  0.759605  0.631041  0.390504  0.589718  1.000000   \n",
              "v                  0.004500  0.758069  0.618267  0.367697  0.585134  0.928390   \n",
              "l                 -0.002157 -0.388018 -0.387270 -0.325488 -0.291631 -0.300350   \n",
              "d                  0.004466  0.599474  0.574305  0.357735  0.487112  0.808291   \n",
              "i                 -0.000969  0.486427  0.304531  0.160594  0.319971  0.725408   \n",
              "e                  0.000965  0.501281  0.430184  0.275179  0.394291  0.569544   \n",
              "b                  0.003757  0.739926  0.611954  0.360889  0.563969  0.918254   \n",
              "t                  0.002752  0.512228  0.472080  0.280391  0.414640  0.602202   \n",
              "lOCode             0.003029  0.803460  0.641835  0.382541  0.636895  0.911761   \n",
              "lOComment          0.003214  0.528029  0.379520  0.292689  0.337728  0.566374   \n",
              "lOBlank            0.003859  0.670751  0.461759  0.282293  0.426030  0.775345   \n",
              "locCodeAndComment  0.001628  0.246244  0.208324  0.164563  0.178546  0.262916   \n",
              "uniq_Op            0.004068  0.367068  0.389917  0.200460  0.378869  0.618021   \n",
              "uniq_Opnd          0.003751  0.637582  0.532358  0.279100  0.550633  0.818994   \n",
              "total_Op           0.003615  0.764612  0.639125  0.394963  0.591597  0.963373   \n",
              "total_Opnd         0.004165  0.761662  0.606453  0.372867  0.567097  0.953080   \n",
              "branchCount        0.002146  0.762755  0.966702  0.774752  0.747870  0.626009   \n",
              "defects            0.001976  0.342642  0.301187  0.259928  0.245618  0.258080   \n",
              "\n",
              "                          v         l         d         i  ...    lOCode  \\\n",
              "id                 0.004500 -0.002157  0.004466 -0.000969  ...  0.003029   \n",
              "loc                0.758069 -0.388018  0.599474  0.486427  ...  0.803460   \n",
              "v(g)               0.618267 -0.387270  0.574305  0.304531  ...  0.641835   \n",
              "ev(g)              0.367697 -0.325488  0.357735  0.160594  ...  0.382541   \n",
              "iv(g)              0.585134 -0.291631  0.487112  0.319971  ...  0.636895   \n",
              "n                  0.928390 -0.300350  0.808291  0.725408  ...  0.911761   \n",
              "v                  1.000000 -0.254087  0.748121  0.673386  ...  0.899258   \n",
              "l                 -0.254087  1.000000 -0.426309 -0.162300  ... -0.289713   \n",
              "d                  0.748121 -0.426309  1.000000  0.515402  ...  0.778856   \n",
              "i                  0.673386 -0.162300  0.515402  1.000000  ...  0.677093   \n",
              "e                  0.582332 -0.091764  0.471276  0.286149  ...  0.580089   \n",
              "b                  0.935263 -0.254245  0.755130  0.681469  ...  0.881238   \n",
              "t                  0.590431 -0.097000  0.493976  0.300938  ...  0.593100   \n",
              "lOCode             0.899258 -0.289713  0.778856  0.677093  ...  1.000000   \n",
              "lOComment          0.531985 -0.187982  0.486619  0.435828  ...  0.555593   \n",
              "lOBlank            0.735278 -0.288838  0.676297  0.654349  ...  0.771688   \n",
              "locCodeAndComment  0.242057 -0.125480  0.268184  0.214151  ...  0.262425   \n",
              "uniq_Op            0.544283 -0.399440  0.782781  0.527640  ...  0.619185   \n",
              "uniq_Opnd          0.798964 -0.283644  0.690652  0.803330  ...  0.826105   \n",
              "total_Op           0.936446 -0.294469  0.808275  0.702058  ...  0.916913   \n",
              "total_Opnd         0.942189 -0.290559  0.784738  0.740201  ...  0.917253   \n",
              "branchCount        0.608678 -0.416185  0.575155  0.313935  ...  0.624248   \n",
              "defects            0.231179 -0.253237  0.241936  0.208577  ...  0.250604   \n",
              "\n",
              "                   lOComment   lOBlank  locCodeAndComment   uniq_Op  \\\n",
              "id                  0.003214  0.003859           0.001628  0.004068   \n",
              "loc                 0.528029  0.670751           0.246244  0.367068   \n",
              "v(g)                0.379520  0.461759           0.208324  0.389917   \n",
              "ev(g)               0.292689  0.282293           0.164563  0.200460   \n",
              "iv(g)               0.337728  0.426030           0.178546  0.378869   \n",
              "n                   0.566374  0.775345           0.262916  0.618021   \n",
              "v                   0.531985  0.735278           0.242057  0.544283   \n",
              "l                  -0.187982 -0.288838          -0.125480 -0.399440   \n",
              "d                   0.486619  0.676297           0.268184  0.782781   \n",
              "i                   0.435828  0.654349           0.214151  0.527640   \n",
              "e                   0.328993  0.436276           0.124604  0.275824   \n",
              "b                   0.531810  0.743894           0.244790  0.538952   \n",
              "t                   0.343287  0.442066           0.129090  0.306073   \n",
              "lOCode              0.555593  0.771688           0.262425  0.619185   \n",
              "lOComment           1.000000  0.580943           0.255394  0.385586   \n",
              "lOBlank             0.580943  1.000000           0.269734  0.560323   \n",
              "locCodeAndComment   0.255394  0.269734           1.000000  0.237375   \n",
              "uniq_Op             0.385586  0.560323           0.237375  1.000000   \n",
              "uniq_Opnd           0.480834  0.699667           0.251569  0.662821   \n",
              "total_Op            0.558460  0.767096           0.259324  0.610608   \n",
              "total_Opnd          0.548299  0.772526           0.256822  0.589740   \n",
              "branchCount         0.391282  0.475718           0.223694  0.368815   \n",
              "defects             0.205402  0.257819           0.133150  0.178474   \n",
              "\n",
              "                   uniq_Opnd  total_Op  total_Opnd  branchCount   defects  \n",
              "id                  0.003751  0.003615    0.004165     0.002146  0.001976  \n",
              "loc                 0.637582  0.764612    0.761662     0.762755  0.342642  \n",
              "v(g)                0.532358  0.639125    0.606453     0.966702  0.301187  \n",
              "ev(g)               0.279100  0.394963    0.372867     0.774752  0.259928  \n",
              "iv(g)               0.550633  0.591597    0.567097     0.747870  0.245618  \n",
              "n                   0.818994  0.963373    0.953080     0.626009  0.258080  \n",
              "v                   0.798964  0.936446    0.942189     0.608678  0.231179  \n",
              "l                  -0.283644 -0.294469   -0.290559    -0.416185 -0.253237  \n",
              "d                   0.690652  0.808275    0.784738     0.575155  0.241936  \n",
              "i                   0.803330  0.702058    0.740201     0.313935  0.208577  \n",
              "e                   0.414846  0.579018    0.566986     0.427110  0.095366  \n",
              "b                   0.795270  0.922115    0.935335     0.611808  0.232594  \n",
              "t                   0.444073  0.602882    0.581832     0.456930  0.099592  \n",
              "lOCode              0.826105  0.916913    0.917253     0.624248  0.250604  \n",
              "lOComment           0.480834  0.558460    0.548299     0.391282  0.205402  \n",
              "lOBlank             0.699667  0.767096    0.772526     0.475718  0.257819  \n",
              "locCodeAndComment   0.251569  0.259324    0.256822     0.223694  0.133150  \n",
              "uniq_Op             0.662821  0.610608    0.589740     0.368815  0.178474  \n",
              "uniq_Opnd           1.000000  0.807058    0.836152     0.509650  0.246113  \n",
              "total_Op            0.807058  1.000000    0.960626     0.629949  0.250533  \n",
              "total_Opnd          0.836152  0.960626    1.000000     0.606509  0.252752  \n",
              "branchCount         0.509650  0.629949    0.606509     1.000000  0.322827  \n",
              "defects             0.246113  0.250533    0.252752     0.322827  1.000000  \n",
              "\n",
              "[23 rows x 23 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-71cc6f57-6b94-4d9a-851f-1bc937098197\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>loc</th>\n",
              "      <th>v(g)</th>\n",
              "      <th>ev(g)</th>\n",
              "      <th>iv(g)</th>\n",
              "      <th>n</th>\n",
              "      <th>v</th>\n",
              "      <th>l</th>\n",
              "      <th>d</th>\n",
              "      <th>i</th>\n",
              "      <th>...</th>\n",
              "      <th>lOCode</th>\n",
              "      <th>lOComment</th>\n",
              "      <th>lOBlank</th>\n",
              "      <th>locCodeAndComment</th>\n",
              "      <th>uniq_Op</th>\n",
              "      <th>uniq_Opnd</th>\n",
              "      <th>total_Op</th>\n",
              "      <th>total_Opnd</th>\n",
              "      <th>branchCount</th>\n",
              "      <th>defects</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>id</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000790</td>\n",
              "      <td>0.003252</td>\n",
              "      <td>-0.000786</td>\n",
              "      <td>0.001259</td>\n",
              "      <td>0.003580</td>\n",
              "      <td>0.004500</td>\n",
              "      <td>-0.002157</td>\n",
              "      <td>0.004466</td>\n",
              "      <td>-0.000969</td>\n",
              "      <td>...</td>\n",
              "      <td>0.003029</td>\n",
              "      <td>0.003214</td>\n",
              "      <td>0.003859</td>\n",
              "      <td>0.001628</td>\n",
              "      <td>0.004068</td>\n",
              "      <td>0.003751</td>\n",
              "      <td>0.003615</td>\n",
              "      <td>0.004165</td>\n",
              "      <td>0.002146</td>\n",
              "      <td>0.001976</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>loc</th>\n",
              "      <td>0.000790</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.761509</td>\n",
              "      <td>0.544569</td>\n",
              "      <td>0.696327</td>\n",
              "      <td>0.759605</td>\n",
              "      <td>0.758069</td>\n",
              "      <td>-0.388018</td>\n",
              "      <td>0.599474</td>\n",
              "      <td>0.486427</td>\n",
              "      <td>...</td>\n",
              "      <td>0.803460</td>\n",
              "      <td>0.528029</td>\n",
              "      <td>0.670751</td>\n",
              "      <td>0.246244</td>\n",
              "      <td>0.367068</td>\n",
              "      <td>0.637582</td>\n",
              "      <td>0.764612</td>\n",
              "      <td>0.761662</td>\n",
              "      <td>0.762755</td>\n",
              "      <td>0.342642</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>v(g)</th>\n",
              "      <td>0.003252</td>\n",
              "      <td>0.761509</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.729249</td>\n",
              "      <td>0.790553</td>\n",
              "      <td>0.631041</td>\n",
              "      <td>0.618267</td>\n",
              "      <td>-0.387270</td>\n",
              "      <td>0.574305</td>\n",
              "      <td>0.304531</td>\n",
              "      <td>...</td>\n",
              "      <td>0.641835</td>\n",
              "      <td>0.379520</td>\n",
              "      <td>0.461759</td>\n",
              "      <td>0.208324</td>\n",
              "      <td>0.389917</td>\n",
              "      <td>0.532358</td>\n",
              "      <td>0.639125</td>\n",
              "      <td>0.606453</td>\n",
              "      <td>0.966702</td>\n",
              "      <td>0.301187</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>ev(g)</th>\n",
              "      <td>-0.000786</td>\n",
              "      <td>0.544569</td>\n",
              "      <td>0.729249</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.545255</td>\n",
              "      <td>0.390504</td>\n",
              "      <td>0.367697</td>\n",
              "      <td>-0.325488</td>\n",
              "      <td>0.357735</td>\n",
              "      <td>0.160594</td>\n",
              "      <td>...</td>\n",
              "      <td>0.382541</td>\n",
              "      <td>0.292689</td>\n",
              "      <td>0.282293</td>\n",
              "      <td>0.164563</td>\n",
              "      <td>0.200460</td>\n",
              "      <td>0.279100</td>\n",
              "      <td>0.394963</td>\n",
              "      <td>0.372867</td>\n",
              "      <td>0.774752</td>\n",
              "      <td>0.259928</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>iv(g)</th>\n",
              "      <td>0.001259</td>\n",
              "      <td>0.696327</td>\n",
              "      <td>0.790553</td>\n",
              "      <td>0.545255</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.589718</td>\n",
              "      <td>0.585134</td>\n",
              "      <td>-0.291631</td>\n",
              "      <td>0.487112</td>\n",
              "      <td>0.319971</td>\n",
              "      <td>...</td>\n",
              "      <td>0.636895</td>\n",
              "      <td>0.337728</td>\n",
              "      <td>0.426030</td>\n",
              "      <td>0.178546</td>\n",
              "      <td>0.378869</td>\n",
              "      <td>0.550633</td>\n",
              "      <td>0.591597</td>\n",
              "      <td>0.567097</td>\n",
              "      <td>0.747870</td>\n",
              "      <td>0.245618</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>n</th>\n",
              "      <td>0.003580</td>\n",
              "      <td>0.759605</td>\n",
              "      <td>0.631041</td>\n",
              "      <td>0.390504</td>\n",
              "      <td>0.589718</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.928390</td>\n",
              "      <td>-0.300350</td>\n",
              "      <td>0.808291</td>\n",
              "      <td>0.725408</td>\n",
              "      <td>...</td>\n",
              "      <td>0.911761</td>\n",
              "      <td>0.566374</td>\n",
              "      <td>0.775345</td>\n",
              "      <td>0.262916</td>\n",
              "      <td>0.618021</td>\n",
              "      <td>0.818994</td>\n",
              "      <td>0.963373</td>\n",
              "      <td>0.953080</td>\n",
              "      <td>0.626009</td>\n",
              "      <td>0.258080</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>v</th>\n",
              "      <td>0.004500</td>\n",
              "      <td>0.758069</td>\n",
              "      <td>0.618267</td>\n",
              "      <td>0.367697</td>\n",
              "      <td>0.585134</td>\n",
              "      <td>0.928390</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.254087</td>\n",
              "      <td>0.748121</td>\n",
              "      <td>0.673386</td>\n",
              "      <td>...</td>\n",
              "      <td>0.899258</td>\n",
              "      <td>0.531985</td>\n",
              "      <td>0.735278</td>\n",
              "      <td>0.242057</td>\n",
              "      <td>0.544283</td>\n",
              "      <td>0.798964</td>\n",
              "      <td>0.936446</td>\n",
              "      <td>0.942189</td>\n",
              "      <td>0.608678</td>\n",
              "      <td>0.231179</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>l</th>\n",
              "      <td>-0.002157</td>\n",
              "      <td>-0.388018</td>\n",
              "      <td>-0.387270</td>\n",
              "      <td>-0.325488</td>\n",
              "      <td>-0.291631</td>\n",
              "      <td>-0.300350</td>\n",
              "      <td>-0.254087</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.426309</td>\n",
              "      <td>-0.162300</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.289713</td>\n",
              "      <td>-0.187982</td>\n",
              "      <td>-0.288838</td>\n",
              "      <td>-0.125480</td>\n",
              "      <td>-0.399440</td>\n",
              "      <td>-0.283644</td>\n",
              "      <td>-0.294469</td>\n",
              "      <td>-0.290559</td>\n",
              "      <td>-0.416185</td>\n",
              "      <td>-0.253237</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>d</th>\n",
              "      <td>0.004466</td>\n",
              "      <td>0.599474</td>\n",
              "      <td>0.574305</td>\n",
              "      <td>0.357735</td>\n",
              "      <td>0.487112</td>\n",
              "      <td>0.808291</td>\n",
              "      <td>0.748121</td>\n",
              "      <td>-0.426309</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.515402</td>\n",
              "      <td>...</td>\n",
              "      <td>0.778856</td>\n",
              "      <td>0.486619</td>\n",
              "      <td>0.676297</td>\n",
              "      <td>0.268184</td>\n",
              "      <td>0.782781</td>\n",
              "      <td>0.690652</td>\n",
              "      <td>0.808275</td>\n",
              "      <td>0.784738</td>\n",
              "      <td>0.575155</td>\n",
              "      <td>0.241936</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>i</th>\n",
              "      <td>-0.000969</td>\n",
              "      <td>0.486427</td>\n",
              "      <td>0.304531</td>\n",
              "      <td>0.160594</td>\n",
              "      <td>0.319971</td>\n",
              "      <td>0.725408</td>\n",
              "      <td>0.673386</td>\n",
              "      <td>-0.162300</td>\n",
              "      <td>0.515402</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>...</td>\n",
              "      <td>0.677093</td>\n",
              "      <td>0.435828</td>\n",
              "      <td>0.654349</td>\n",
              "      <td>0.214151</td>\n",
              "      <td>0.527640</td>\n",
              "      <td>0.803330</td>\n",
              "      <td>0.702058</td>\n",
              "      <td>0.740201</td>\n",
              "      <td>0.313935</td>\n",
              "      <td>0.208577</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>e</th>\n",
              "      <td>0.000965</td>\n",
              "      <td>0.501281</td>\n",
              "      <td>0.430184</td>\n",
              "      <td>0.275179</td>\n",
              "      <td>0.394291</td>\n",
              "      <td>0.569544</td>\n",
              "      <td>0.582332</td>\n",
              "      <td>-0.091764</td>\n",
              "      <td>0.471276</td>\n",
              "      <td>0.286149</td>\n",
              "      <td>...</td>\n",
              "      <td>0.580089</td>\n",
              "      <td>0.328993</td>\n",
              "      <td>0.436276</td>\n",
              "      <td>0.124604</td>\n",
              "      <td>0.275824</td>\n",
              "      <td>0.414846</td>\n",
              "      <td>0.579018</td>\n",
              "      <td>0.566986</td>\n",
              "      <td>0.427110</td>\n",
              "      <td>0.095366</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>b</th>\n",
              "      <td>0.003757</td>\n",
              "      <td>0.739926</td>\n",
              "      <td>0.611954</td>\n",
              "      <td>0.360889</td>\n",
              "      <td>0.563969</td>\n",
              "      <td>0.918254</td>\n",
              "      <td>0.935263</td>\n",
              "      <td>-0.254245</td>\n",
              "      <td>0.755130</td>\n",
              "      <td>0.681469</td>\n",
              "      <td>...</td>\n",
              "      <td>0.881238</td>\n",
              "      <td>0.531810</td>\n",
              "      <td>0.743894</td>\n",
              "      <td>0.244790</td>\n",
              "      <td>0.538952</td>\n",
              "      <td>0.795270</td>\n",
              "      <td>0.922115</td>\n",
              "      <td>0.935335</td>\n",
              "      <td>0.611808</td>\n",
              "      <td>0.232594</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>t</th>\n",
              "      <td>0.002752</td>\n",
              "      <td>0.512228</td>\n",
              "      <td>0.472080</td>\n",
              "      <td>0.280391</td>\n",
              "      <td>0.414640</td>\n",
              "      <td>0.602202</td>\n",
              "      <td>0.590431</td>\n",
              "      <td>-0.097000</td>\n",
              "      <td>0.493976</td>\n",
              "      <td>0.300938</td>\n",
              "      <td>...</td>\n",
              "      <td>0.593100</td>\n",
              "      <td>0.343287</td>\n",
              "      <td>0.442066</td>\n",
              "      <td>0.129090</td>\n",
              "      <td>0.306073</td>\n",
              "      <td>0.444073</td>\n",
              "      <td>0.602882</td>\n",
              "      <td>0.581832</td>\n",
              "      <td>0.456930</td>\n",
              "      <td>0.099592</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>lOCode</th>\n",
              "      <td>0.003029</td>\n",
              "      <td>0.803460</td>\n",
              "      <td>0.641835</td>\n",
              "      <td>0.382541</td>\n",
              "      <td>0.636895</td>\n",
              "      <td>0.911761</td>\n",
              "      <td>0.899258</td>\n",
              "      <td>-0.289713</td>\n",
              "      <td>0.778856</td>\n",
              "      <td>0.677093</td>\n",
              "      <td>...</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.555593</td>\n",
              "      <td>0.771688</td>\n",
              "      <td>0.262425</td>\n",
              "      <td>0.619185</td>\n",
              "      <td>0.826105</td>\n",
              "      <td>0.916913</td>\n",
              "      <td>0.917253</td>\n",
              "      <td>0.624248</td>\n",
              "      <td>0.250604</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>lOComment</th>\n",
              "      <td>0.003214</td>\n",
              "      <td>0.528029</td>\n",
              "      <td>0.379520</td>\n",
              "      <td>0.292689</td>\n",
              "      <td>0.337728</td>\n",
              "      <td>0.566374</td>\n",
              "      <td>0.531985</td>\n",
              "      <td>-0.187982</td>\n",
              "      <td>0.486619</td>\n",
              "      <td>0.435828</td>\n",
              "      <td>...</td>\n",
              "      <td>0.555593</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.580943</td>\n",
              "      <td>0.255394</td>\n",
              "      <td>0.385586</td>\n",
              "      <td>0.480834</td>\n",
              "      <td>0.558460</td>\n",
              "      <td>0.548299</td>\n",
              "      <td>0.391282</td>\n",
              "      <td>0.205402</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>lOBlank</th>\n",
              "      <td>0.003859</td>\n",
              "      <td>0.670751</td>\n",
              "      <td>0.461759</td>\n",
              "      <td>0.282293</td>\n",
              "      <td>0.426030</td>\n",
              "      <td>0.775345</td>\n",
              "      <td>0.735278</td>\n",
              "      <td>-0.288838</td>\n",
              "      <td>0.676297</td>\n",
              "      <td>0.654349</td>\n",
              "      <td>...</td>\n",
              "      <td>0.771688</td>\n",
              "      <td>0.580943</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.269734</td>\n",
              "      <td>0.560323</td>\n",
              "      <td>0.699667</td>\n",
              "      <td>0.767096</td>\n",
              "      <td>0.772526</td>\n",
              "      <td>0.475718</td>\n",
              "      <td>0.257819</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>locCodeAndComment</th>\n",
              "      <td>0.001628</td>\n",
              "      <td>0.246244</td>\n",
              "      <td>0.208324</td>\n",
              "      <td>0.164563</td>\n",
              "      <td>0.178546</td>\n",
              "      <td>0.262916</td>\n",
              "      <td>0.242057</td>\n",
              "      <td>-0.125480</td>\n",
              "      <td>0.268184</td>\n",
              "      <td>0.214151</td>\n",
              "      <td>...</td>\n",
              "      <td>0.262425</td>\n",
              "      <td>0.255394</td>\n",
              "      <td>0.269734</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.237375</td>\n",
              "      <td>0.251569</td>\n",
              "      <td>0.259324</td>\n",
              "      <td>0.256822</td>\n",
              "      <td>0.223694</td>\n",
              "      <td>0.133150</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>uniq_Op</th>\n",
              "      <td>0.004068</td>\n",
              "      <td>0.367068</td>\n",
              "      <td>0.389917</td>\n",
              "      <td>0.200460</td>\n",
              "      <td>0.378869</td>\n",
              "      <td>0.618021</td>\n",
              "      <td>0.544283</td>\n",
              "      <td>-0.399440</td>\n",
              "      <td>0.782781</td>\n",
              "      <td>0.527640</td>\n",
              "      <td>...</td>\n",
              "      <td>0.619185</td>\n",
              "      <td>0.385586</td>\n",
              "      <td>0.560323</td>\n",
              "      <td>0.237375</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.662821</td>\n",
              "      <td>0.610608</td>\n",
              "      <td>0.589740</td>\n",
              "      <td>0.368815</td>\n",
              "      <td>0.178474</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>uniq_Opnd</th>\n",
              "      <td>0.003751</td>\n",
              "      <td>0.637582</td>\n",
              "      <td>0.532358</td>\n",
              "      <td>0.279100</td>\n",
              "      <td>0.550633</td>\n",
              "      <td>0.818994</td>\n",
              "      <td>0.798964</td>\n",
              "      <td>-0.283644</td>\n",
              "      <td>0.690652</td>\n",
              "      <td>0.803330</td>\n",
              "      <td>...</td>\n",
              "      <td>0.826105</td>\n",
              "      <td>0.480834</td>\n",
              "      <td>0.699667</td>\n",
              "      <td>0.251569</td>\n",
              "      <td>0.662821</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.807058</td>\n",
              "      <td>0.836152</td>\n",
              "      <td>0.509650</td>\n",
              "      <td>0.246113</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>total_Op</th>\n",
              "      <td>0.003615</td>\n",
              "      <td>0.764612</td>\n",
              "      <td>0.639125</td>\n",
              "      <td>0.394963</td>\n",
              "      <td>0.591597</td>\n",
              "      <td>0.963373</td>\n",
              "      <td>0.936446</td>\n",
              "      <td>-0.294469</td>\n",
              "      <td>0.808275</td>\n",
              "      <td>0.702058</td>\n",
              "      <td>...</td>\n",
              "      <td>0.916913</td>\n",
              "      <td>0.558460</td>\n",
              "      <td>0.767096</td>\n",
              "      <td>0.259324</td>\n",
              "      <td>0.610608</td>\n",
              "      <td>0.807058</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.960626</td>\n",
              "      <td>0.629949</td>\n",
              "      <td>0.250533</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>total_Opnd</th>\n",
              "      <td>0.004165</td>\n",
              "      <td>0.761662</td>\n",
              "      <td>0.606453</td>\n",
              "      <td>0.372867</td>\n",
              "      <td>0.567097</td>\n",
              "      <td>0.953080</td>\n",
              "      <td>0.942189</td>\n",
              "      <td>-0.290559</td>\n",
              "      <td>0.784738</td>\n",
              "      <td>0.740201</td>\n",
              "      <td>...</td>\n",
              "      <td>0.917253</td>\n",
              "      <td>0.548299</td>\n",
              "      <td>0.772526</td>\n",
              "      <td>0.256822</td>\n",
              "      <td>0.589740</td>\n",
              "      <td>0.836152</td>\n",
              "      <td>0.960626</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.606509</td>\n",
              "      <td>0.252752</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>branchCount</th>\n",
              "      <td>0.002146</td>\n",
              "      <td>0.762755</td>\n",
              "      <td>0.966702</td>\n",
              "      <td>0.774752</td>\n",
              "      <td>0.747870</td>\n",
              "      <td>0.626009</td>\n",
              "      <td>0.608678</td>\n",
              "      <td>-0.416185</td>\n",
              "      <td>0.575155</td>\n",
              "      <td>0.313935</td>\n",
              "      <td>...</td>\n",
              "      <td>0.624248</td>\n",
              "      <td>0.391282</td>\n",
              "      <td>0.475718</td>\n",
              "      <td>0.223694</td>\n",
              "      <td>0.368815</td>\n",
              "      <td>0.509650</td>\n",
              "      <td>0.629949</td>\n",
              "      <td>0.606509</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.322827</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>defects</th>\n",
              "      <td>0.001976</td>\n",
              "      <td>0.342642</td>\n",
              "      <td>0.301187</td>\n",
              "      <td>0.259928</td>\n",
              "      <td>0.245618</td>\n",
              "      <td>0.258080</td>\n",
              "      <td>0.231179</td>\n",
              "      <td>-0.253237</td>\n",
              "      <td>0.241936</td>\n",
              "      <td>0.208577</td>\n",
              "      <td>...</td>\n",
              "      <td>0.250604</td>\n",
              "      <td>0.205402</td>\n",
              "      <td>0.257819</td>\n",
              "      <td>0.133150</td>\n",
              "      <td>0.178474</td>\n",
              "      <td>0.246113</td>\n",
              "      <td>0.250533</td>\n",
              "      <td>0.252752</td>\n",
              "      <td>0.322827</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>23 rows × 23 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-71cc6f57-6b94-4d9a-851f-1bc937098197')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-71cc6f57-6b94-4d9a-851f-1bc937098197 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-71cc6f57-6b94-4d9a-851f-1bc937098197');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-2d46072b-c1bc-4b39-b4f4-5f4755b65a0a\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-2d46072b-c1bc-4b39-b4f4-5f4755b65a0a')\"\n",
              "            title=\"Suggest charts.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-2d46072b-c1bc-4b39-b4f4-5f4755b65a0a button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 69
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Let's make it look a little prettier\n",
        "corr_matrix = tr.corr()\n",
        "plt.figure(figsize=(15, 10))\n",
        "sns.heatmap(corr_matrix,\n",
        "            annot=True,\n",
        "            linewidths=0.5,\n",
        "            fmt= \".2f\",\n",
        "            cmap=\"YlGnBu\");\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 737
        },
        "id": "5a_g71DFDwwy",
        "outputId": "93718896-cb1a-4701-d449-e197c44f0e18"
      },
      "execution_count": 70,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1500x1000 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Everything except target variable\n",
        "X_train = tr.drop(\"defects\", axis=1)\n",
        "\n",
        "# Target variable\n",
        "y_train = tr.defects.values"
      ],
      "metadata": {
        "id": "6W7mW9hnED3X"
      },
      "execution_count": 71,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Independent variables (no target column)\n",
        "X.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 256
        },
        "id": "9l5nz2NYEQBo",
        "outputId": "c7927ff3-9018-4a9f-ee01-5fb93725cf1d"
      },
      "execution_count": 72,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   id   loc  v(g)  ev(g)  iv(g)     n       v     l      d      i  ...  \\\n",
              "0   0  22.0   3.0    1.0    2.0  60.0  278.63  0.06  19.56  14.25  ...   \n",
              "1   1  14.0   2.0    1.0    2.0  32.0  151.27  0.14   7.00  21.11  ...   \n",
              "2   2  11.0   2.0    1.0    2.0  45.0  197.65  0.11   8.05  22.76  ...   \n",
              "3   3   8.0   1.0    1.0    1.0  23.0   94.01  0.19   5.25  17.86  ...   \n",
              "4   4  11.0   2.0    1.0    2.0  17.0   60.94  0.18   5.63  12.44  ...   \n",
              "\n",
              "        t  lOCode  lOComment  lOBlank  locCodeAndComment  uniq_Op  uniq_Opnd  \\\n",
              "0  302.71      17          1        1                  0     16.0        9.0   \n",
              "1   52.04      11          0        1                  0     11.0       11.0   \n",
              "2   97.45       8          0        1                  0     12.0       11.0   \n",
              "3   26.31       4          0        2                  0      8.0        6.0   \n",
              "4   20.31       7          0        2                  0      7.0        6.0   \n",
              "\n",
              "   total_Op  total_Opnd  branchCount  \n",
              "0      38.0        22.0          5.0  \n",
              "1      18.0        14.0          3.0  \n",
              "2      28.0        17.0          3.0  \n",
              "3      16.0         7.0          1.0  \n",
              "4      10.0        10.0          3.0  \n",
              "\n",
              "[5 rows x 22 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-9e738921-52e6-4491-8afb-744eeebf2821\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>loc</th>\n",
              "      <th>v(g)</th>\n",
              "      <th>ev(g)</th>\n",
              "      <th>iv(g)</th>\n",
              "      <th>n</th>\n",
              "      <th>v</th>\n",
              "      <th>l</th>\n",
              "      <th>d</th>\n",
              "      <th>i</th>\n",
              "      <th>...</th>\n",
              "      <th>t</th>\n",
              "      <th>lOCode</th>\n",
              "      <th>lOComment</th>\n",
              "      <th>lOBlank</th>\n",
              "      <th>locCodeAndComment</th>\n",
              "      <th>uniq_Op</th>\n",
              "      <th>uniq_Opnd</th>\n",
              "      <th>total_Op</th>\n",
              "      <th>total_Opnd</th>\n",
              "      <th>branchCount</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>22.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>60.0</td>\n",
              "      <td>278.63</td>\n",
              "      <td>0.06</td>\n",
              "      <td>19.56</td>\n",
              "      <td>14.25</td>\n",
              "      <td>...</td>\n",
              "      <td>302.71</td>\n",
              "      <td>17</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>16.0</td>\n",
              "      <td>9.0</td>\n",
              "      <td>38.0</td>\n",
              "      <td>22.0</td>\n",
              "      <td>5.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>14.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>32.0</td>\n",
              "      <td>151.27</td>\n",
              "      <td>0.14</td>\n",
              "      <td>7.00</td>\n",
              "      <td>21.11</td>\n",
              "      <td>...</td>\n",
              "      <td>52.04</td>\n",
              "      <td>11</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>11.0</td>\n",
              "      <td>11.0</td>\n",
              "      <td>18.0</td>\n",
              "      <td>14.0</td>\n",
              "      <td>3.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2</td>\n",
              "      <td>11.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>45.0</td>\n",
              "      <td>197.65</td>\n",
              "      <td>0.11</td>\n",
              "      <td>8.05</td>\n",
              "      <td>22.76</td>\n",
              "      <td>...</td>\n",
              "      <td>97.45</td>\n",
              "      <td>8</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>12.0</td>\n",
              "      <td>11.0</td>\n",
              "      <td>28.0</td>\n",
              "      <td>17.0</td>\n",
              "      <td>3.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3</td>\n",
              "      <td>8.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>23.0</td>\n",
              "      <td>94.01</td>\n",
              "      <td>0.19</td>\n",
              "      <td>5.25</td>\n",
              "      <td>17.86</td>\n",
              "      <td>...</td>\n",
              "      <td>26.31</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>8.0</td>\n",
              "      <td>6.0</td>\n",
              "      <td>16.0</td>\n",
              "      <td>7.0</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4</td>\n",
              "      <td>11.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>17.0</td>\n",
              "      <td>60.94</td>\n",
              "      <td>0.18</td>\n",
              "      <td>5.63</td>\n",
              "      <td>12.44</td>\n",
              "      <td>...</td>\n",
              "      <td>20.31</td>\n",
              "      <td>7</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>7.0</td>\n",
              "      <td>6.0</td>\n",
              "      <td>10.0</td>\n",
              "      <td>10.0</td>\n",
              "      <td>3.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 22 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9e738921-52e6-4491-8afb-744eeebf2821')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-9e738921-52e6-4491-8afb-744eeebf2821 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-9e738921-52e6-4491-8afb-744eeebf2821');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-95b6f4db-c619-42d9-9698-be7d1e277e5f\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-95b6f4db-c619-42d9-9698-be7d1e277e5f')\"\n",
              "            title=\"Suggest charts.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-95b6f4db-c619-42d9-9698-be7d1e277e5f button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 72
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Targets\n",
        "y"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "TkO530xvEWJC",
        "outputId": "c34ebde0-0a4b-42bb-9f63-d2b4e8aa05c8"
      },
      "execution_count": 73,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([False, False, False, ..., False, False, False])"
            ]
          },
          "metadata": {},
          "execution_count": 73
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "X_train.shape, y_train.shape,"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "756LFw41OHUN",
        "outputId": "933670e0-e7a7-4318-b5cb-46b71dd5d6cd"
      },
      "execution_count": 74,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "((101763, 22), (101763,))"
            ]
          },
          "metadata": {},
          "execution_count": 74
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Split data into train and test sets\n",
        "np.random.seed(42)\n",
        "\n",
        "# Split into train & test set\n",
        "X_train, X_test, y_train, y_test = train_test_split(X,\n",
        "                                                    y,\n",
        "                                                    test_size=0.2)"
      ],
      "metadata": {
        "id": "ILF4qjpmPHaj"
      },
      "execution_count": 75,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "X_train"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 444
        },
        "id": "eXfnTtZLOq3d",
        "outputId": "4f941656-3c75-423f-bcb4-7dcbcea5ef4b"
      },
      "execution_count": 76,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "          id   loc  v(g)  ev(g)  iv(g)      n       v     l      d      i  \\\n",
              "41510  41510  34.0   8.0    1.0    6.0  142.0  734.13  0.04  23.20  31.64   \n",
              "24079  24079  21.0   3.0    1.0    2.0   40.0  180.94  0.07  13.93  14.87   \n",
              "91367  91367   7.0   1.0    1.0    1.0   15.0   49.83  0.29   3.50  14.24   \n",
              "6237    6237  10.0   2.0    1.0    2.0   25.0   95.18  0.19   5.33  17.85   \n",
              "72207  72207  17.0   3.0    1.0    2.0   36.0  152.21  0.12   8.44  20.19   \n",
              "...      ...   ...   ...    ...    ...    ...     ...   ...    ...    ...   \n",
              "6265    6265  58.0   8.0    3.0    7.0  163.0  915.93  0.04  26.21  32.61   \n",
              "54886  54886  61.0   8.0    5.0    6.0  157.0  806.51  0.05  18.38  44.35   \n",
              "76820  76820  16.0   4.0    3.0    1.0   25.0  116.76  0.13   9.17  13.11   \n",
              "860      860  17.0   2.0    1.0    2.0   36.0  165.06  0.17   5.85  28.52   \n",
              "15795  15795  14.0   2.0    1.0    2.0   33.0  125.64  0.19   5.32  24.38   \n",
              "\n",
              "       ...        t  lOCode  lOComment  lOBlank  locCodeAndComment  uniq_Op  \\\n",
              "41510  ...   946.21      23          1       11                  0     18.0   \n",
              "24079  ...   131.94      16          0        2                  0     13.0   \n",
              "91367  ...     9.69       4          0        1                  0      5.0   \n",
              "6237   ...    33.84       7          0        1                  0      8.0   \n",
              "72207  ...    81.60      12          1        2                  0      9.0   \n",
              "...    ...      ...     ...        ...      ...                ...      ...   \n",
              "6265   ...  1097.28      41          3        4                  7     18.0   \n",
              "54886  ...   749.36      41          8       12                  0     17.0   \n",
              "76820  ...    49.96      11          0        3                  0     11.0   \n",
              "860    ...    50.17      14          0        1                  0      9.0   \n",
              "15795  ...    36.17      10          0        2                  0      8.0   \n",
              "\n",
              "       uniq_Opnd  total_Op  total_Opnd  branchCount  \n",
              "41510       16.0      84.0        58.0         15.0  \n",
              "24079        7.0      25.0        15.0          5.0  \n",
              "91367        5.0       8.0         7.0          1.0  \n",
              "6237         6.0      16.0         9.0          3.0  \n",
              "72207        9.0      21.0        15.0          5.0  \n",
              "...          ...       ...         ...          ...  \n",
              "6265        21.0     105.0        64.0         15.0  \n",
              "54886       24.0      88.0        69.0         15.0  \n",
              "76820        6.0      15.0        10.0          7.0  \n",
              "860         13.0      22.0        14.0          3.0  \n",
              "15795       11.0      17.0        13.0          3.0  \n",
              "\n",
              "[81410 rows x 22 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-346510c3-11ca-4a0d-9ea4-2071e7133220\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>loc</th>\n",
              "      <th>v(g)</th>\n",
              "      <th>ev(g)</th>\n",
              "      <th>iv(g)</th>\n",
              "      <th>n</th>\n",
              "      <th>v</th>\n",
              "      <th>l</th>\n",
              "      <th>d</th>\n",
              "      <th>i</th>\n",
              "      <th>...</th>\n",
              "      <th>t</th>\n",
              "      <th>lOCode</th>\n",
              "      <th>lOComment</th>\n",
              "      <th>lOBlank</th>\n",
              "      <th>locCodeAndComment</th>\n",
              "      <th>uniq_Op</th>\n",
              "      <th>uniq_Opnd</th>\n",
              "      <th>total_Op</th>\n",
              "      <th>total_Opnd</th>\n",
              "      <th>branchCount</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>41510</th>\n",
              "      <td>41510</td>\n",
              "      <td>34.0</td>\n",
              "      <td>8.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>6.0</td>\n",
              "      <td>142.0</td>\n",
              "      <td>734.13</td>\n",
              "      <td>0.04</td>\n",
              "      <td>23.20</td>\n",
              "      <td>31.64</td>\n",
              "      <td>...</td>\n",
              "      <td>946.21</td>\n",
              "      <td>23</td>\n",
              "      <td>1</td>\n",
              "      <td>11</td>\n",
              "      <td>0</td>\n",
              "      <td>18.0</td>\n",
              "      <td>16.0</td>\n",
              "      <td>84.0</td>\n",
              "      <td>58.0</td>\n",
              "      <td>15.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24079</th>\n",
              "      <td>24079</td>\n",
              "      <td>21.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>40.0</td>\n",
              "      <td>180.94</td>\n",
              "      <td>0.07</td>\n",
              "      <td>13.93</td>\n",
              "      <td>14.87</td>\n",
              "      <td>...</td>\n",
              "      <td>131.94</td>\n",
              "      <td>16</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>13.0</td>\n",
              "      <td>7.0</td>\n",
              "      <td>25.0</td>\n",
              "      <td>15.0</td>\n",
              "      <td>5.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>91367</th>\n",
              "      <td>91367</td>\n",
              "      <td>7.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>15.0</td>\n",
              "      <td>49.83</td>\n",
              "      <td>0.29</td>\n",
              "      <td>3.50</td>\n",
              "      <td>14.24</td>\n",
              "      <td>...</td>\n",
              "      <td>9.69</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>8.0</td>\n",
              "      <td>7.0</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6237</th>\n",
              "      <td>6237</td>\n",
              "      <td>10.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>25.0</td>\n",
              "      <td>95.18</td>\n",
              "      <td>0.19</td>\n",
              "      <td>5.33</td>\n",
              "      <td>17.85</td>\n",
              "      <td>...</td>\n",
              "      <td>33.84</td>\n",
              "      <td>7</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>8.0</td>\n",
              "      <td>6.0</td>\n",
              "      <td>16.0</td>\n",
              "      <td>9.0</td>\n",
              "      <td>3.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>72207</th>\n",
              "      <td>72207</td>\n",
              "      <td>17.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>36.0</td>\n",
              "      <td>152.21</td>\n",
              "      <td>0.12</td>\n",
              "      <td>8.44</td>\n",
              "      <td>20.19</td>\n",
              "      <td>...</td>\n",
              "      <td>81.60</td>\n",
              "      <td>12</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>9.0</td>\n",
              "      <td>9.0</td>\n",
              "      <td>21.0</td>\n",
              "      <td>15.0</td>\n",
              "      <td>5.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6265</th>\n",
              "      <td>6265</td>\n",
              "      <td>58.0</td>\n",
              "      <td>8.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>7.0</td>\n",
              "      <td>163.0</td>\n",
              "      <td>915.93</td>\n",
              "      <td>0.04</td>\n",
              "      <td>26.21</td>\n",
              "      <td>32.61</td>\n",
              "      <td>...</td>\n",
              "      <td>1097.28</td>\n",
              "      <td>41</td>\n",
              "      <td>3</td>\n",
              "      <td>4</td>\n",
              "      <td>7</td>\n",
              "      <td>18.0</td>\n",
              "      <td>21.0</td>\n",
              "      <td>105.0</td>\n",
              "      <td>64.0</td>\n",
              "      <td>15.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>54886</th>\n",
              "      <td>54886</td>\n",
              "      <td>61.0</td>\n",
              "      <td>8.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>6.0</td>\n",
              "      <td>157.0</td>\n",
              "      <td>806.51</td>\n",
              "      <td>0.05</td>\n",
              "      <td>18.38</td>\n",
              "      <td>44.35</td>\n",
              "      <td>...</td>\n",
              "      <td>749.36</td>\n",
              "      <td>41</td>\n",
              "      <td>8</td>\n",
              "      <td>12</td>\n",
              "      <td>0</td>\n",
              "      <td>17.0</td>\n",
              "      <td>24.0</td>\n",
              "      <td>88.0</td>\n",
              "      <td>69.0</td>\n",
              "      <td>15.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>76820</th>\n",
              "      <td>76820</td>\n",
              "      <td>16.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>25.0</td>\n",
              "      <td>116.76</td>\n",
              "      <td>0.13</td>\n",
              "      <td>9.17</td>\n",
              "      <td>13.11</td>\n",
              "      <td>...</td>\n",
              "      <td>49.96</td>\n",
              "      <td>11</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>11.0</td>\n",
              "      <td>6.0</td>\n",
              "      <td>15.0</td>\n",
              "      <td>10.0</td>\n",
              "      <td>7.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>860</th>\n",
              "      <td>860</td>\n",
              "      <td>17.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>36.0</td>\n",
              "      <td>165.06</td>\n",
              "      <td>0.17</td>\n",
              "      <td>5.85</td>\n",
              "      <td>28.52</td>\n",
              "      <td>...</td>\n",
              "      <td>50.17</td>\n",
              "      <td>14</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>9.0</td>\n",
              "      <td>13.0</td>\n",
              "      <td>22.0</td>\n",
              "      <td>14.0</td>\n",
              "      <td>3.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15795</th>\n",
              "      <td>15795</td>\n",
              "      <td>14.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>33.0</td>\n",
              "      <td>125.64</td>\n",
              "      <td>0.19</td>\n",
              "      <td>5.32</td>\n",
              "      <td>24.38</td>\n",
              "      <td>...</td>\n",
              "      <td>36.17</td>\n",
              "      <td>10</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>8.0</td>\n",
              "      <td>11.0</td>\n",
              "      <td>17.0</td>\n",
              "      <td>13.0</td>\n",
              "      <td>3.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>81410 rows × 22 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-346510c3-11ca-4a0d-9ea4-2071e7133220')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-346510c3-11ca-4a0d-9ea4-2071e7133220 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-346510c3-11ca-4a0d-9ea4-2071e7133220');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-7d597016-0166-430e-a757-b40dcbab6c05\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-7d597016-0166-430e-a757-b40dcbab6c05')\"\n",
              "            title=\"Suggest charts.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-7d597016-0166-430e-a757-b40dcbab6c05 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 76
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y_train"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PsZHuU6HPQpc",
        "outputId": "e32a6018-d0b4-4088-b7b8-2836e2f46fa1"
      },
      "execution_count": 77,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([False, False,  True, ..., False, False, False])"
            ]
          },
          "metadata": {},
          "execution_count": 77
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Put models in a dictionary\n",
        "models = {\"Logistic Regression\": LogisticRegression(),\n",
        "          \"KNN\": KNeighborsClassifier(),\n",
        "          \"Random Forest\": RandomForestClassifier()}\n",
        "\n",
        "# Create a function to fit and score models\n",
        "def fit_and_score(models, X_train, X_test, y_train, y_test):\n",
        "    \"\"\"\n",
        "    Fits and evaluates given machine learning models.\n",
        "    models : a dict of differetn Scikit-Learn machine learning models\n",
        "    X_train : training data (no labels)\n",
        "    X_test : testing data (no labels)\n",
        "    y_train : training labels\n",
        "    y_test : test labels\n",
        "    \"\"\"\n",
        "    # Set random seed\n",
        "    np.random.seed(42)\n",
        "    # Make a dictionary to keep model scores\n",
        "    model_scores = {}\n",
        "    # Loop through models\n",
        "    for name, model in models.items():\n",
        "        # Fit the model to the data\n",
        "        model.fit(X_train, y_train)\n",
        "        # Evaluate the model and append its score to model_scores\n",
        "        model_scores[name] = model.score(X_test, y_test)\n",
        "    return model_scores"
      ],
      "metadata": {
        "id": "GSOGQZFXPpZx"
      },
      "execution_count": 78,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model_scores = fit_and_score(models=models,\n",
        "                             X_train=X_train,\n",
        "                             X_test=X_test,\n",
        "                             y_train=y_train,\n",
        "                             y_test=y_test)\n",
        "\n",
        "model_scores"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mb-mmlCJPscJ",
        "outputId": "13f202a6-c66b-4734-ec09-dd7d48b02624"
      },
      "execution_count": 79,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
            "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
            "\n",
            "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
            "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
            "Please also refer to the documentation for alternative solver options:\n",
            "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
            "  n_iter_i = _check_optimize_result(\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'Logistic Regression': 0.7996364172357884,\n",
              " 'KNN': 0.7803763572937651,\n",
              " 'Random Forest': 0.8111334938338328}"
            ]
          },
          "metadata": {},
          "execution_count": 79
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Model Comparison"
      ],
      "metadata": {
        "id": "KE-mqbi9QiiU"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "model_compare = pd.DataFrame(model_scores, index=[\"accuracy\"])\n",
        "model_compare.T.plot.bar();"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 549
        },
        "id": "1O-sGtZFQj_C",
        "outputId": "8e18de9a-aa01-44f4-f188-3b506de7eb10"
      },
      "execution_count": 80,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Setup random seed\n",
        "np.random.seed(42)\n",
        "\n",
        "# Setup random hyperparameter search for RandomForestClassifier\n",
        "rs_rf = RandomizedSearchCV(RandomForestClassifier(),\n",
        "                           param_distributions=rf_grid,\n",
        "                           cv=5,\n",
        "                           n_iter=20,\n",
        "                           verbose=True)\n",
        "\n",
        "# Fit random hyperparameter search model for RandomForestClassifier()\n",
        "rs_rf.fit(X_train, y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 373
        },
        "id": "vE6xRs_2dqPR",
        "outputId": "014c2f86-bacf-402c-dbfd-8b633e3a93c3"
      },
      "execution_count": 98,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Fitting 5 folds for each of 20 candidates, totalling 100 fits\n"
          ]
        },
        {
          "output_type": "error",
          "ename": "KeyboardInterrupt",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-98-d5c5a91297fb>\u001b[0m in \u001b[0;36m<cell line: 12>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     10\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     11\u001b[0m \u001b[0;31m# Fit random hyperparameter search model for RandomForestClassifier()\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 12\u001b[0;31m \u001b[0mrs_rf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_train\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_search.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, X, y, groups, **fit_params)\u001b[0m\n\u001b[1;32m    872\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mresults\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    873\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 874\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_run_search\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mevaluate_candidates\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    875\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    876\u001b[0m             \u001b[0;31m# multimetric is determined here because in the case of a callable\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_search.py\u001b[0m in \u001b[0;36m_run_search\u001b[0;34m(self, evaluate_candidates)\u001b[0m\n\u001b[1;32m   1766\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_run_search\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mevaluate_candidates\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1767\u001b[0m         \u001b[0;34m\"\"\"Search n_iter candidates from param_distributions\"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1768\u001b[0;31m         evaluate_candidates(\n\u001b[0m\u001b[1;32m   1769\u001b[0m             ParameterSampler(\n\u001b[1;32m   1770\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mparam_distributions\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mn_iter\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrandom_state\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrandom_state\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_search.py\u001b[0m in \u001b[0;36mevaluate_candidates\u001b[0;34m(candidate_params, cv, more_results)\u001b[0m\n\u001b[1;32m    819\u001b[0m                     )\n\u001b[1;32m    820\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 821\u001b[0;31m                 out = parallel(\n\u001b[0m\u001b[1;32m    822\u001b[0m                     delayed(_fit_and_score)(\n\u001b[1;32m    823\u001b[0m                         \u001b[0mclone\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbase_estimator\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/utils/parallel.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, iterable)\u001b[0m\n\u001b[1;32m     61\u001b[0m             \u001b[0;32mfor\u001b[0m \u001b[0mdelayed_func\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwargs\u001b[0m \u001b[0;32min\u001b[0m \u001b[0miterable\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     62\u001b[0m         )\n\u001b[0;32m---> 63\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0msuper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__call__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0miterable_with_config\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     64\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     65\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/joblib/parallel.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, iterable)\u001b[0m\n\u001b[1;32m   1861\u001b[0m             \u001b[0moutput\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_sequential_output\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0miterable\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1862\u001b[0m             \u001b[0mnext\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0moutput\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1863\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0moutput\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreturn_generator\u001b[0m \u001b[0;32melse\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0moutput\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1864\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1865\u001b[0m         \u001b[0;31m# Let's create an ID that uniquely identifies the current call. If the\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/joblib/parallel.py\u001b[0m in \u001b[0;36m_get_sequential_output\u001b[0;34m(self, iterable)\u001b[0m\n\u001b[1;32m   1790\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mn_dispatched_batches\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1791\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mn_dispatched_tasks\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1792\u001b[0;31m                 \u001b[0mres\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1793\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mn_completed_tasks\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1794\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mprint_progress\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/utils/parallel.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m    121\u001b[0m             \u001b[0mconfig\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m{\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    122\u001b[0m         \u001b[0;32mwith\u001b[0m \u001b[0mconfig_context\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0mconfig\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 123\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfunction\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_validation.py\u001b[0m in \u001b[0;36m_fit_and_score\u001b[0;34m(estimator, X, y, scorer, train, test, verbose, parameters, fit_params, return_train_score, return_parameters, return_n_test_samples, return_times, return_estimator, split_progress, candidate_progress, error_score)\u001b[0m\n\u001b[1;32m    684\u001b[0m             \u001b[0mestimator\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mfit_params\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    685\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 686\u001b[0;31m             \u001b[0mestimator\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mfit_params\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    687\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    688\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, X, y, sample_weight)\u001b[0m\n\u001b[1;32m    471\u001b[0m             \u001b[0;31m# parallel_backend contexts set at a higher level,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    472\u001b[0m             \u001b[0;31m# since correctness does not rely on using threads.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 473\u001b[0;31m             trees = Parallel(\n\u001b[0m\u001b[1;32m    474\u001b[0m                 \u001b[0mn_jobs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mn_jobs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    475\u001b[0m                 \u001b[0mverbose\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mverbose\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/utils/parallel.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, iterable)\u001b[0m\n\u001b[1;32m     61\u001b[0m             \u001b[0;32mfor\u001b[0m \u001b[0mdelayed_func\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwargs\u001b[0m \u001b[0;32min\u001b[0m \u001b[0miterable\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     62\u001b[0m         )\n\u001b[0;32m---> 63\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0msuper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__call__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0miterable_with_config\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     64\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     65\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/joblib/parallel.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, iterable)\u001b[0m\n\u001b[1;32m   1861\u001b[0m             \u001b[0moutput\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_sequential_output\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0miterable\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1862\u001b[0m             \u001b[0mnext\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0moutput\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1863\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0moutput\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreturn_generator\u001b[0m \u001b[0;32melse\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0moutput\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1864\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1865\u001b[0m         \u001b[0;31m# Let's create an ID that uniquely identifies the current call. If the\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/joblib/parallel.py\u001b[0m in \u001b[0;36m_get_sequential_output\u001b[0;34m(self, iterable)\u001b[0m\n\u001b[1;32m   1790\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mn_dispatched_batches\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1791\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mn_dispatched_tasks\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1792\u001b[0;31m                 \u001b[0mres\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1793\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mn_completed_tasks\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1794\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mprint_progress\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/utils/parallel.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m    121\u001b[0m             \u001b[0mconfig\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m{\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    122\u001b[0m         \u001b[0;32mwith\u001b[0m \u001b[0mconfig_context\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0mconfig\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 123\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfunction\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py\u001b[0m in \u001b[0;36m_parallel_build_trees\u001b[0;34m(tree, bootstrap, X, y, sample_weight, tree_idx, n_trees, verbose, class_weight, n_samples_bootstrap)\u001b[0m\n\u001b[1;32m    182\u001b[0m             \u001b[0mcurr_sample_weight\u001b[0m \u001b[0;34m*=\u001b[0m \u001b[0mcompute_sample_weight\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"balanced\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindices\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mindices\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    183\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 184\u001b[0;31m         \u001b[0mtree\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msample_weight\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcurr_sample_weight\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcheck_input\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    185\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    186\u001b[0m         \u001b[0mtree\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msample_weight\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0msample_weight\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcheck_input\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/tree/_classes.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, X, y, sample_weight, check_input)\u001b[0m\n\u001b[1;32m    887\u001b[0m         \"\"\"\n\u001b[1;32m    888\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 889\u001b[0;31m         super().fit(\n\u001b[0m\u001b[1;32m    890\u001b[0m             \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    891\u001b[0m             \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/tree/_classes.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, X, y, sample_weight, check_input)\u001b[0m\n\u001b[1;32m    377\u001b[0m             )\n\u001b[1;32m    378\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 379\u001b[0;31m         \u001b[0mbuilder\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbuild\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtree_\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msample_weight\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    380\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    381\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mn_outputs_\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m1\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mis_classifier\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "%%time\n",
        "# Most ideal hyperparameters\n",
        "ideal_model = RandomForestClassifier(n_estimators=90,\n",
        "                                    min_samples_leaf=2,\n",
        "                                    min_samples_split=14,\n",
        "                                    max_features=0.5,\n",
        "                                    n_jobs=-1,\n",
        "                                    max_samples=None)\n",
        "ideal_model.fit(X_train, y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 127
        },
        "id": "B_DoXkSDhSRm",
        "outputId": "86fc9835-0a97-4d90-d176-51bdaea49323"
      },
      "execution_count": 99,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "CPU times: user 56.6 s, sys: 115 ms, total: 56.7 s\n",
            "Wall time: 32.2 s\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "RandomForestClassifier(max_features=0.5, min_samples_leaf=2,\n",
              "                       min_samples_split=14, n_estimators=90, n_jobs=-1)"
            ],
            "text/html": [
              "<style>#sk-container-id-2 {color: black;background-color: white;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestClassifier(max_features=0.5, min_samples_leaf=2,\n",
              "                       min_samples_split=14, n_estimators=90, n_jobs=-1)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-4\" type=\"checkbox\" checked><label for=\"sk-estimator-id-4\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomForestClassifier</label><div class=\"sk-toggleable__content\"><pre>RandomForestClassifier(max_features=0.5, min_samples_leaf=2,\n",
              "                       min_samples_split=14, n_estimators=90, n_jobs=-1)</pre></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 99
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "ideal_model.score\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QPlH-4y3h147",
        "outputId": "dc7e8d48-87e6-4436-d3b1-d90a67536276"
      },
      "execution_count": 103,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<bound method ClassifierMixin.score of RandomForestClassifier(max_features=0.5, min_samples_leaf=2,\n",
              "                       min_samples_split=14, n_estimators=90, n_jobs=-1)>"
            ]
          },
          "metadata": {},
          "execution_count": 103
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Let's see how the model goes predicting on the test data\n",
        "ideal_model.predict(te)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "BIFlRlJXiMGV",
        "outputId": "ace37e0c-6039-4668-a0ee-7d22acf83e36"
      },
      "execution_count": 105,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([False, False,  True, ..., False, False,  True])"
            ]
          },
          "metadata": {},
          "execution_count": 105
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Make predictions on the test dataset using the best model\n",
        "test_preds = ideal_model.predict(te)"
      ],
      "metadata": {
        "id": "X5saoTfIiY1c"
      },
      "execution_count": 107,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Create DataFrame compatible with Kaggle submission requirements\n",
        "df_preds = pd.DataFrame()\n",
        "df_preds[\"id\"] = te[\"id\"]\n",
        "df_preds[\"defects\"] = test_preds\n",
        "df_preds"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "hIgSoXgYi80i",
        "outputId": "4a31e1cb-3df0-4711-ffec-fd32fc9d9719"
      },
      "execution_count": 109,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "           id  defects\n",
              "0      101763    False\n",
              "1      101764    False\n",
              "2      101765     True\n",
              "3      101766     True\n",
              "4      101767    False\n",
              "...       ...      ...\n",
              "67837  169600    False\n",
              "67838  169601    False\n",
              "67839  169602    False\n",
              "67840  169603    False\n",
              "67841  169604     True\n",
              "\n",
              "[67842 rows x 2 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-0cb73a40-6dad-4258-98c7-1ced3301c6fc\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>defects</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>101763</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>101764</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>101765</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>101766</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>101767</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>67837</th>\n",
              "      <td>169600</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>67838</th>\n",
              "      <td>169601</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>67839</th>\n",
              "      <td>169602</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>67840</th>\n",
              "      <td>169603</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>67841</th>\n",
              "      <td>169604</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>67842 rows × 2 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0cb73a40-6dad-4258-98c7-1ced3301c6fc')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-0cb73a40-6dad-4258-98c7-1ced3301c6fc button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-0cb73a40-6dad-4258-98c7-1ced3301c6fc');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-7353c9fc-bc4d-42e0-bb03-3493985ef299\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-7353c9fc-bc4d-42e0-bb03-3493985ef299')\"\n",
              "            title=\"Suggest charts.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-7353c9fc-bc4d-42e0-bb03-3493985ef299 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 109
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Export to csv...\n",
        "df_preds.to_csv(\"predictions.csv\",\n",
        "              index=False)"
      ],
      "metadata": {
        "id": "F9xNEW1UjPx-"
      },
      "execution_count": 111,
      "outputs": []
    }
  ]
}